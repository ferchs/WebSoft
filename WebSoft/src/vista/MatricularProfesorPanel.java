/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import control.ControlAdministrarCursos;
import control.ControlBuscarProfesorPanel;
import control.ControlMatriculasPanel;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.entidades.CursosImpartidos;
import modelo.entidades.CursosImpartidosPK;
/**
 *
 * @author ferchs
 */
public class MatricularProfesorPanel extends javax.swing.JPanel {
    /**
     * Creates new form AgregarEstudiantePanel
     */
    public MatricularProfesorPanel() {
        controlBuscarProfesorPanel= new ControlBuscarProfesorPanel();
        controlAdministrarCursos= new ControlAdministrarCursos();
        controlMatriculasPanel= new ControlMatriculasPanel();
        initComponents();
        jScrollPane1= new JScrollPane();
        seleccionaProfesor.setVisible(false);
        gradoT.setVisible(false);
        grado.setVisible(false);
        consecutivoT.setVisible(false);
        consecutivo.setVisible(false);
        materiaT.setVisible(false);
        materia.setVisible(false);
        matricular.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        matricular = new javax.swing.JButton();
        barraBusqueda = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        seleccionaProfesor = new javax.swing.JLabel();
        grado = new javax.swing.JComboBox<>();
        consecutivoT = new javax.swing.JLabel();
        consecutivo = new javax.swing.JComboBox<>();
        gradoT = new javax.swing.JLabel();
        materiaT = new javax.swing.JLabel();
        materia = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(102, 102, 102));
        setForeground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        matricular.setBackground(new java.awt.Color(101, 166, 148));
        matricular.setForeground(new java.awt.Color(255, 255, 255));
        matricular.setText("Matricular");
        matricular.setBorderPainted(false);
        matricular.setOpaque(true);
        matricular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matricularActionPerformed(evt);
            }
        });
        add(matricular, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 470, -1, -1));

        barraBusqueda.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        barraBusqueda.setForeground(new java.awt.Color(204, 204, 204));
        barraBusqueda.setText("Ingresa el numero de documento del profesor");
        barraBusqueda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                barraBusquedaMouseClicked(evt);
            }
        });
        add(barraBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 630, -1));

        buscar.setBackground(new java.awt.Color(101, 166, 148));
        buscar.setForeground(new java.awt.Color(255, 255, 255));
        buscar.setText("Buscar");
        buscar.setBorderPainted(false);
        buscar.setOpaque(true);
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });
        add(buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 30, 110, 30));

        seleccionaProfesor.setBackground(new java.awt.Color(255, 255, 255));
        seleccionaProfesor.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        seleccionaProfesor.setForeground(new java.awt.Color(255, 255, 255));
        seleccionaProfesor.setText("Selecciona un profesor:");
        add(seleccionaProfesor, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, -1, -1));

        grado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione...", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        grado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                gradoItemStateChanged(evt);
            }
        });
        cargarGrados();
        add(grado, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 320, -1, -1));

        consecutivoT.setBackground(new java.awt.Color(255, 255, 255));
        consecutivoT.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        consecutivoT.setForeground(new java.awt.Color(255, 255, 255));
        consecutivoT.setText("Consecutivo:");
        add(consecutivoT, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 300, -1, -1));

        consecutivo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        consecutivo.setEnabled(false);
        add(consecutivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 320, -1, -1));

        gradoT.setBackground(new java.awt.Color(255, 255, 255));
        gradoT.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        gradoT.setForeground(new java.awt.Color(255, 255, 255));
        gradoT.setText("Grado:");
        add(gradoT, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 300, -1, -1));

        materiaT.setBackground(new java.awt.Color(255, 255, 255));
        materiaT.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        materiaT.setForeground(new java.awt.Color(255, 255, 255));
        materiaT.setText("Materia:");
        add(materiaT, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 370, -1, -1));

        materia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione...", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        materia.setEnabled(false);
        materia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                materiaItemStateChanged(evt);
            }
        });
        add(materia, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 390, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    
    private void matricularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matricularActionPerformed
        // TODO add your handling code here:
        if(matricular.getActionCommand().equals("cambiarMatricula")){
            if(grado.getSelectedIndex()==0){
                controlMatriculasPanel.eliminarCursoImpartido(cursosImpartidosPK.getInstitucion(),cursosImpartidosPK.getGrado(),
                        cursosImpartidosPK.getConsecutivocurso(),cursosImpartidosPK.getProfesor(),cursosImpartidosPK.getMateria());
                JOptionPane mensaje= new JOptionPane();
                mensaje.setBackground(new java.awt.Color(102, 102, 102));
                mensaje.setForeground(Color.white);
                mensaje.showMessageDialog(null,"El profesor se ha desvinculado del curso");
            }
            else{
                if(validarCamposEntrada()){
                int filaSeleccionada=ultimoResultadoBusqueda.getSelectedRow();
                String idProfesor= (String) ultimoResultadoBusqueda.getModel().getValueAt(filaSeleccionada, 0);
                String nombreGrado=(String) grado.getSelectedItem();
                String consecutivoStr= (String) consecutivo.getSelectedItem();
                int consecutivo=Integer.parseInt(consecutivoStr);
                HashMap<String,String> datosCurso=controlAdministrarCursos.obtenerDatosCurso(nombreGrado, consecutivo);
                int idGrado=Integer.parseInt(datosCurso.get("idGrado"));
                String item=(String) materia.getSelectedItem();
                int index=item.indexOf("-");
                String tmp=item.substring(index+1,item.length()).trim();
                int idMateria=Integer.parseInt(tmp);
                CursosImpartidosPK nueva= new CursosImpartidosPK();
                nueva.setInstitucion(cursosImpartidosPK.getInstitucion());
                nueva.setGrado(idGrado);
                nueva.setConsecutivocurso(consecutivo);
                nueva.setProfesor(idProfesor);
                nueva.setMateria(idMateria);
                controlMatriculasPanel.editarCursoImpartido(cursosImpartidosPK, nueva);
                JOptionPane mensaje= new JOptionPane();
                mensaje.setBackground(new java.awt.Color(102, 102, 102));
                mensaje.setForeground(Color.white);
                mensaje.showMessageDialog(null,"Se ha matriculado el profesor en el curso indicado");
                }
            }
        }
        else{
        if(validarCamposEntrada()){
            int filaSeleccionada=ultimoResultadoBusqueda.getSelectedRow();
            String idProfesor= (String) ultimoResultadoBusqueda.getModel().getValueAt(filaSeleccionada, 0);
            String nombreGrado=(String) grado.getSelectedItem();
            String item=(String) materia.getSelectedItem();
            int index=item.indexOf("-");
            String tmp=item.substring(index+1,item.length()).trim();
            int idMateria=Integer.parseInt(tmp);
            String consecutivoStr= (String) consecutivo.getSelectedItem();
            int consecutivo=Integer.parseInt(consecutivoStr);
            HashMap<String,String> datosCurso=controlAdministrarCursos.obtenerDatosCurso(nombreGrado, consecutivo);
            int idGrado=Integer.parseInt(datosCurso.get("idGrado"));
            controlMatriculasPanel.crearCursoImpartido(idGrado, consecutivo, idProfesor, idMateria);
            JOptionPane mensaje= new JOptionPane();
            mensaje.setBackground(new java.awt.Color(102, 102, 102));
            mensaje.setForeground(Color.white);
            mensaje.showMessageDialog(null,"Se ha matriculado el estudiante en el curso indicado");
        }
        }    
    }//GEN-LAST:event_matricularActionPerformed

    private boolean validarCamposEntrada(){
        boolean valido=true;
        if(ultimoResultadoBusqueda!=null){
        int filaSeleccionada=ultimoResultadoBusqueda.getSelectedRow();
        String idProfesor=null;
        String consec=null;
        String grad=null;
        String mate=null;
        if(filaSeleccionada>=0){
            idProfesor= (String) ultimoResultadoBusqueda.getModel().getValueAt(filaSeleccionada, 0);
        }
        if(grado.getSelectedIndex()>0 && consecutivo.getSelectedIndex()>0 && materia.getSelectedIndex()>0){
            grad=(String) grado.getSelectedItem();
            consec= (String) consecutivo.getSelectedItem();
            mate=(String) materia.getSelectedItem();
        }
        if(idProfesor==null){
            seleccionaProfesor.setForeground(Color.red);
            valido=false;
        }
        else{
            seleccionaProfesor.setForeground(Color.WHITE);
        }
        if(mate==null){
            materiaT.setForeground(Color.red);
            valido=false;
        }
        else{
            materiaT.setForeground(Color.WHITE);
        }
        if(grad==null || grado.getSelectedIndex()==0){
            gradoT.setForeground(Color.red);
            valido=false;
        }
        else{
           gradoT.setForeground(Color.WHITE);
        }
        if(consec==null|| consecutivo.getSelectedIndex()==0){
           consecutivoT.setForeground(Color.red);
           valido=false;
        }
        else{
            consecutivoT.setForeground(Color.WHITE);
        }
        if(idProfesor==null || grad==null || consec==null || mate==null ){
            valido=false;
            JOptionPane mensaje= new JOptionPane();
            mensaje.setBackground(new java.awt.Color(102, 102, 102));
            mensaje.setForeground(Color.white);
            mensaje.showMessageDialog(null,"Debes completar los campos indicados");
        }
        }
        else{
            JOptionPane mensaje= new JOptionPane();
            mensaje.setBackground(new java.awt.Color(102, 102, 102));
            mensaje.setForeground(Color.white);
            mensaje.showMessageDialog(null,"Debes buscar un profesor para matricular");
            valido=false;
        }
        return valido;
    }
    
    private void barraBusquedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barraBusquedaMouseClicked
        // TODO add your handling code here:
        barraBusqueda.setForeground(new java.awt.Color(0, 0, 0));
        barraBusqueda.setText("");
    }//GEN-LAST:event_barraBusquedaMouseClicked

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        // TODO add your handling code here:
        String itemBusqueda=barraBusqueda.getText().toLowerCase().trim();
        boolean valido=isNumeric(itemBusqueda);
        if(valido){
            DefaultTableModel modelo=controlBuscarProfesorPanel.obtenerModeloBusquedaMatricula(itemBusqueda);
            JTable tablaResultados= new JTable();
            tablaResultados=agregarAccionesBotones(tablaResultados);
            mostrarDatosEnTabla(modelo,tablaResultados);
            boolean matriculado=controlMatriculasPanel.profesorMatriculado(itemBusqueda);
            seleccionaProfesor.setVisible(true);
            grado.setVisible(true);
            grado.setSelectedIndex(0);
            gradoT.setVisible(true);
            consecutivoT.setVisible(true);
            consecutivo.setVisible(true);
            materiaT.setVisible(true);
            materia.setVisible(true);
            matricular.setText("Matricular");
            matricular.setVisible(true);
            if(matriculado){
                CursosImpartidos cursoImpartido=controlMatriculasPanel.buscarCursoImpartidoProfesor(itemBusqueda);
                cursosImpartidosPK=cursoImpartido.getCursosImpartidosPK();
                MostrarItem(grado,cursoImpartido.getCursos().getGrados().getNombre());
                MostrarItem(consecutivo,Integer.toString(cursoImpartido.getCursos().getCursosPK().getConsecutivo()));
                MostrarItem(materia,cursoImpartido.getMaterias().getNombre()+" - "+cursoImpartido.getMaterias().getCodigoMateria());
                matricular.setActionCommand("cambiarMatricula");
                matricular.setText("Cambiar Matricula");
                matricular.setVisible(true);
            } 
        }
        else{
            JOptionPane mensaje= new JOptionPane();
            mensaje.setBackground(new java.awt.Color(102, 102, 102));
            mensaje.setForeground(Color.white);
            mensaje.showMessageDialog(null,"Ingresa un numero de documento valido");
        }
        
    }//GEN-LAST:event_buscarActionPerformed

    private void gradoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_gradoItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()==ItemEvent.SELECTED){
            if(grado.getSelectedIndex()>0){
                String nombreGrado=(String) grado.getSelectedItem();
                String [] listadoConsecutivos=controlAdministrarCursos.obtenerListadoConsecutivosDeGrado(nombreGrado);
                String [] listadoMaterias=controlAdministrarCursos.obtenerListadoMateriasGrado(nombreGrado);
                if(listadoConsecutivos!=null){
                    listadoConsecutivos[0]="Seleccione...";
                    listadoMaterias[0]="Seleccione...";
                    DefaultComboBoxModel consecutivos= new DefaultComboBoxModel(listadoConsecutivos);
                    DefaultComboBoxModel materias= new DefaultComboBoxModel(listadoMaterias);
                    consecutivo.setModel(consecutivos);
                    consecutivo.setEnabled(true);
                    materia.setModel(materias);
                    materia.setEnabled(true);
                }
                else{
                    JOptionPane mensaje= new JOptionPane();
                    mensaje.setBackground(new java.awt.Color(102, 102, 102));
                    mensaje.setForeground(Color.white);
                    mensaje.showMessageDialog(null,"No existen cursos creados para el grado "+nombreGrado);
                }
            }
            else{
                consecutivo.setEnabled(false);
                consecutivo.setSelectedIndex(0);
                materia.setEnabled(false);
                materia.setSelectedIndex(0);
            }
        }
    }//GEN-LAST:event_gradoItemStateChanged

    private void materiaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_materiaItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_materiaItemStateChanged
    
    private final void cargarGrados(){
        String [] listadoGrados=controlAdministrarCursos.obtenerListadoGrados();
        if(listadoGrados!=null){
        listadoGrados[0]="Seleccione...";
        DefaultComboBoxModel grados= new DefaultComboBoxModel(listadoGrados);
        grado.setModel(grados);
        }
        else{
            listadoGrados=new String[1];
            listadoGrados[0]="Seleccione...";
            DefaultComboBoxModel grados= new DefaultComboBoxModel(listadoGrados);
            grado.setModel(grados);
        }
    }
    
    public void mostrarDatosEnTabla(DefaultTableModel modelo, JTable tabla){
         tabla.setModel(modelo);  
         tabla=aplicarFormatoTabla(tabla);
         ultimoResultadoBusqueda=tabla;
         add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 570, 110));
         revalidate();
         repaint();
    }
     public void mostrarDatosEnTabla(JTable tabla){
         jScrollPane1.setViewportView(tabla);
         add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 570, 110));
         revalidate();
         repaint();
    }
    
    private JTable agregarAccionesBotones(JTable tabla){
        tabla.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila = tabla.rowAtPoint(e.getPoint());
                int columna = tabla.columnAtPoint(e.getPoint());
                if (tabla.getModel().getColumnClass(columna).equals(Object.class)) {
                    JButton btn=(JButton) tabla.getModel().getValueAt(fila, columna);
                    String id=(String)tabla.getModel().getValueAt(fila,0);
                    if(btn.getActionCommand().equals("seleccionar")){
                        selecccionarProfesor(tabla,fila);
                    }
                }
            }
        });
        return tabla;
    }
    
    public void selecccionarProfesor(JTable tabla,int fila){
        tabla.setRowSelectionInterval(fila,fila);
    }
    
    private JTable aplicarFormatoTabla(JTable tabla){
       tabla.setRowHeight(20);
       tabla.setDefaultRenderer(Object.class, new BotonTablaRender());
       tabla.setGridColor(new java.awt.Color(102, 102, 102));
       tabla.setSelectionBackground(new java.awt.Color(101, 166, 148));
       tabla.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
       tabla.setRowSelectionAllowed(true);
       tabla.getTableHeader().setReorderingAllowed(false);
       jScrollPane1.setViewportView(tabla);
       tabla.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setResizable(false);
            tabla.getColumnModel().getColumn(0).setPreferredWidth(40);
            tabla.getColumnModel().getColumn(1).setResizable(false);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(120);
            tabla.getColumnModel().getColumn(2).setResizable(false);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(10);
        }
        return tabla;
    }
    
    private DefaultTableModel crearModeloTabla(String [] columnas, Class[] types, Object [][] datos){

        for(int i=0;i<datos.length;i++){
            
        }
         return new javax.swing.table.DefaultTableModel(datos,columnas) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
    }
    
    private void MostrarItem(JComboBox comboBox, String itemSeleccionado){
         int num = comboBox.getItemCount();
         for (int i = 0; i < num; i++) {
            String item = (String) comboBox.getItemAt(i);
            if(itemSeleccionado.equals(item)){
                comboBox.setSelectedIndex(i);
            }
         }
    }
    
    private static boolean isNumeric(String str) {
        return (str.matches("[+-]?\\d*(\\.\\d+)?") && str.equals("")==false);
    }
    
    private CursosImpartidosPK cursosImpartidosPK;
    private ControlMatriculasPanel controlMatriculasPanel;
    private ControlAdministrarCursos controlAdministrarCursos;
    private ControlBuscarProfesorPanel controlBuscarProfesorPanel;
    private JScrollPane jScrollPane1;
    private JTable ultimoResultadoBusqueda;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField barraBusqueda;
    private javax.swing.JButton buscar;
    private javax.swing.JComboBox<String> consecutivo;
    private javax.swing.JLabel consecutivoT;
    private javax.swing.JComboBox<String> grado;
    private javax.swing.JLabel gradoT;
    private javax.swing.JComboBox<String> materia;
    private javax.swing.JLabel materiaT;
    private javax.swing.JButton matricular;
    private javax.swing.JLabel seleccionaProfesor;
    // End of variables declaration//GEN-END:variables
}
