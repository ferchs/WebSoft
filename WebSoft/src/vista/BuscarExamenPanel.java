/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import control.ControlAdministrarCursos;
import control.ControlGestionarEvaluaciones;
import control.ControlGestionarExamenes;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.entidades.Evaluaciones;
import java.util.Date;
import modelo.entidades.Examenes;


/**
 *
 * @author ferchs
 */
public class BuscarExamenPanel extends javax.swing.JPanel  {

    /**
     * Creates new form AgregarEstudiantePanel
     */
    
    protected GestionarNotasPanel gestionarNotasPanel;
    
    public BuscarExamenPanel(GestionarNotasPanel gestionarNotasPanel) {
        controlGestionarExamenes= new ControlGestionarExamenes();
        controlGestionarEvaluaciones= new ControlGestionarEvaluaciones();
        controlAdministrarCursos= new ControlAdministrarCursos();
        initComponents();
        jScrollPane1= new JScrollPane();
        this.gestionarNotasPanel=gestionarNotasPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBusqueda = new javax.swing.JPanel();
        mostrar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        gradoT = new javax.swing.JLabel();
        grado = new javax.swing.JComboBox<>();
        consecutivoT = new javax.swing.JLabel();
        consecutivo = new javax.swing.JComboBox<>();
        materiaT = new javax.swing.JLabel();
        materia = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(102, 102, 102));
        setForeground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelBusqueda.setBackground(new java.awt.Color(102, 102, 102));
        panelBusqueda.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mostrar.setBackground(new java.awt.Color(101, 166, 148));
        mostrar.setForeground(new java.awt.Color(255, 255, 255));
        mostrar.setText("Mostrar");
        mostrar.setBorderPainted(false);
        mostrar.setOpaque(true);
        mostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarActionPerformed(evt);
            }
        });
        panelBusqueda.add(mostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 30, 110, 30));

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        panelBusqueda.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 570, -1));

        gradoT.setBackground(new java.awt.Color(255, 255, 255));
        gradoT.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        gradoT.setForeground(new java.awt.Color(255, 255, 255));
        gradoT.setText("Grado:");
        panelBusqueda.add(gradoT, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        grado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione...", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        cargarGrados();
        grado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                gradoItemStateChanged(evt);
            }
        });
        panelBusqueda.add(grado, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        consecutivoT.setBackground(new java.awt.Color(255, 255, 255));
        consecutivoT.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        consecutivoT.setForeground(new java.awt.Color(255, 255, 255));
        consecutivoT.setText("Consecutivo:");
        panelBusqueda.add(consecutivoT, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, -1, -1));

        consecutivo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione...", "1", "2", "3", "4", "5" }));
        consecutivo.setEnabled(false);
        consecutivo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                consecutivoItemStateChanged(evt);
            }
        });
        panelBusqueda.add(consecutivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, -1, -1));

        materiaT.setBackground(new java.awt.Color(255, 255, 255));
        materiaT.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        materiaT.setForeground(new java.awt.Color(255, 255, 255));
        materiaT.setText("Materia:");
        panelBusqueda.add(materiaT, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, -1, -1));

        materia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        materia.setEnabled(false);
        materia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                materiaItemStateChanged(evt);
            }
        });
        panelBusqueda.add(materia, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 30, 220, -1));

        add(panelBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 810, 90));
    }// </editor-fold>//GEN-END:initComponents

    private void mostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarActionPerformed
        // TODO add your handling code here:
        if(validarCamposPanel()){
            String nombreGrado=(String) grado.getSelectedItem();
            String consecutivoStr= (String) consecutivo.getSelectedItem();
            String nombreMateria=(String)materia.getSelectedItem();
            int consec=Integer.parseInt(consecutivoStr);
            HashMap<String,String> datosCurso=controlAdministrarCursos.obtenerDatosCurso(nombreGrado, consec);
            int idGrado=Integer.parseInt(datosCurso.get("idGrado"));
            String item=(String) materia.getSelectedItem();
            int index=item.indexOf("-");
            String tmp=item.substring(index+1,item.length()).trim();
            int idMateria=Integer.parseInt(tmp);
            DefaultTableModel modelo=controlGestionarExamenes.obtenerModeloBusquedaExamen(idGrado, consec, idMateria);
            JTable tablaResultados= new JTable();
            tablaResultados=agregarAccionesBotones(tablaResultados);
            mostrarDatosEnTabla(modelo,tablaResultados);   
        }
        else{
            JOptionPane mensaje= new JOptionPane();
            mensaje.setBackground(new java.awt.Color(102, 102, 102));
            mensaje.setForeground(Color.white);
            mensaje.showMessageDialog(null,"Debes seleccionar los datos indicados. Comprueba de que hayan datos creados");
        }
    }//GEN-LAST:event_mostrarActionPerformed

    private void gradoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_gradoItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()==ItemEvent.SELECTED){
            if(grado.getSelectedIndex()>0){
                String nombreGrado=(String) grado.getSelectedItem();
                String [] listadoConsecutivos=controlGestionarExamenes.obtenerConsecutivosGradosEvaluaciones(nombreGrado);
                if(listadoConsecutivos!=null){
                    listadoConsecutivos[0]="Seleccione...";
                    DefaultComboBoxModel consecutivos= new DefaultComboBoxModel(listadoConsecutivos);
                    consecutivo.setModel(consecutivos);
                    consecutivo.setEnabled(true);
                }
                else{
                    JOptionPane mensaje= new JOptionPane();
                    mensaje.setBackground(new java.awt.Color(102, 102, 102));
                    mensaje.setForeground(Color.white);
                    mensaje.showMessageDialog(null,"No existen cursos creados para el grado "+nombreGrado);
                }
            }
            else{
                consecutivo.setEnabled(false);
                consecutivo.setSelectedIndex(0);
                materia.setEnabled(false);
                materia.setSelectedIndex(0);
            }
        }
    }//GEN-LAST:event_gradoItemStateChanged

    private void consecutivoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_consecutivoItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()==ItemEvent.SELECTED){
            int itemIndex=consecutivo.getSelectedIndex();
            if(itemIndex>0){
                String nombreGrado=(String) grado.getSelectedItem();
                String consecutivoStr= (String) consecutivo.getSelectedItem();
                int consecutivo=Integer.parseInt(consecutivoStr);
                HashMap<String,String> datosCurso=controlAdministrarCursos.obtenerDatosCurso(nombreGrado, consecutivo);
                int idGrado=Integer.parseInt(datosCurso.get("idGrado"));
                String [] listadoMaterias=controlGestionarExamenes.obtenerMateriasCursoEvaluaciones(idGrado,consecutivo);
                if(listadoMaterias.length>0){
                    listadoMaterias[0]="Seleccione...";
                    DefaultComboBoxModel materias= new DefaultComboBoxModel(listadoMaterias);
                    materia.setModel(materias);
                    materia.setEnabled(true);
                }
            }
            else{
                materia.setEnabled(false);
                materia.setSelectedIndex(0);
            }
        }
    }//GEN-LAST:event_consecutivoItemStateChanged

    private void materiaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_materiaItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()==ItemEvent.SELECTED){
            int itemIndex=materia.getSelectedIndex();
            if(itemIndex>0){
                String nombreGrado=(String) grado.getSelectedItem();
                String consecutivoStr= (String) consecutivo.getSelectedItem();
                int consecutivo=Integer.parseInt(consecutivoStr);
                HashMap<String,String> datosCurso=controlAdministrarCursos.obtenerDatosCurso(nombreGrado, consecutivo);
                int idGrado=Integer.parseInt(datosCurso.get("idGrado"));
                String item=(String) materia.getSelectedItem();
                int index=item.indexOf("-");
                String tmp=item.substring(index+1,item.length()).trim();
                int idMateria=Integer.parseInt(tmp);
                String [] listadoTemas=controlGestionarExamenes.obtenerTemasCursoEvaluaciones(idGrado,consecutivo,idMateria);
                if(listadoTemas.length>0){
                    listadoTemas[0]="Seleccione...";
                    DefaultComboBoxModel materias= new DefaultComboBoxModel(listadoTemas);
                }
            }
        }
    }//GEN-LAST:event_materiaItemStateChanged

    public void mostrarDatosEnTabla(DefaultTableModel modelo, JTable tabla){
         tabla.setModel(modelo);  
         tabla=aplicarFormatoTabla(tabla);
         ultimoResultadoBusqueda=tabla;
         add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 790, 470));
         revalidate();
         repaint();
    }
     public void mostrarDatosEnTabla(JTable tabla){
         jScrollPane1.setViewportView(tabla);
         add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 790, 470));
         revalidate();
         repaint();
    }
    
    private JTable agregarAccionesBotones(JTable tabla){
        tabla.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila = tabla.rowAtPoint(e.getPoint());
                int columna = tabla.columnAtPoint(e.getPoint());
                if (tabla.getModel().getColumnClass(columna).equals(Object.class)) {
                    JButton btn=(JButton) tabla.getModel().getValueAt(fila, columna);
                    String gradoStr=(String) grado.getSelectedItem();
                    String consecutivoStr=(String) consecutivo.getSelectedItem();
                    int consecutivoTmp=Integer.parseInt(consecutivoStr);
                    HashMap<String,String> datosCurso=controlAdministrarCursos.obtenerDatosCurso(gradoStr, consecutivoTmp);
                    int idGrado=Integer.parseInt(datosCurso.get("idGrado"));
                    String item=(String)materia.getSelectedItem();
                    int index=item.indexOf("-");
                    String tmp=item.substring(index+1,item.length()).trim();
                    int idMateria=Integer.parseInt(tmp);
                    String temaTmp=(String) tabla.getModel().getValueAt(fila,3);
                    String idEstudianteTmp=(String) tabla.getModel().getValueAt(fila,0);
                    Date fecha=(Date) tabla.getModel().getValueAt(fila,2);
                    if(btn.getActionCommand().equals("editar")){
                        editarExamen(idGrado,consecutivoTmp,idEstudianteTmp,idMateria, temaTmp, fecha);
                    }
                    if(btn.getActionCommand().equals("eliminar")){
                        int respuesta=JOptionPane.showConfirmDialog(null, "¿Eliminar este examen?", "Confirmar Eliminacion", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                        if(respuesta==0){
                            eliminarExamen(fila,idGrado,consecutivoTmp,idEstudianteTmp,idMateria, temaTmp, fecha);
                        }
                    }
                }
            }
        });
        return tabla;
    }
    
   
    public void editarExamen(int idGrado,int consecutivo, String idEstudiante, int idMateria, String tema, java.util.Date fecha){
        Examenes examen=controlGestionarExamenes.obtenerExamenPorId(idGrado, consecutivo, idEstudiante, idMateria, tema, fecha);
        EditarExamenPanel eep= new EditarExamenPanel();
        eep.llenarCampos(examen);
        gestionarNotasPanel.mostarPanel(eep);
    }
    
    public void eliminarExamen(int fila,int idGrado,int consecutivo, String idEstudiante, int idMateria, String tema, Date fecha){
        boolean eliminado=controlGestionarExamenes.eliminarExamen(idGrado, consecutivo, idEstudiante, idMateria, tema, fecha);
        if(eliminado){
            DefaultTableModel modelo=(DefaultTableModel) ultimoResultadoBusqueda.getModel();
            modelo.removeRow(fila);
            mostrarDatosEnTabla(modelo,ultimoResultadoBusqueda);
        }
    }
    
    private JTable aplicarFormatoTabla(JTable tabla){
       tabla.setRowHeight(20);
       tabla.setDefaultRenderer(Object.class, new BotonTablaRender());
       tabla.setGridColor(new java.awt.Color(102, 102, 102));
       tabla.setSelectionBackground(new java.awt.Color(101, 166, 148));
       tabla.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
       tabla.setRowSelectionAllowed(true);
       tabla.getTableHeader().setReorderingAllowed(false);
       jScrollPane1.setViewportView(tabla);
       tabla.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setResizable(false);
            tabla.getColumnModel().getColumn(0).setPreferredWidth(25);
            tabla.getColumnModel().getColumn(1).setResizable(false);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(70);
            tabla.getColumnModel().getColumn(2).setResizable(false);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(25);
            tabla.getColumnModel().getColumn(3).setResizable(false);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(70);
            tabla.getColumnModel().getColumn(4).setResizable(false);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(15);
            tabla.getColumnModel().getColumn(5).setResizable(false);
            tabla.getColumnModel().getColumn(5).setPreferredWidth(15);
        }
        return tabla;
    }
    
    private DefaultTableModel crearModeloTabla(String [] columnas, Class[] types, Object [][] datos){

        for(int i=0;i<datos.length;i++){
            
        }
         return new javax.swing.table.DefaultTableModel(datos,columnas) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false};

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
    }
    
    private final void cargarGrados(){
        String [] listadoGrados=controlGestionarExamenes.obtenerGradosEvaluaciones();
        if(listadoGrados!=null){
        listadoGrados[0]="Seleccione...";
        DefaultComboBoxModel grados= new DefaultComboBoxModel(listadoGrados);
        grado.setModel(grados);
        }
        else{
            listadoGrados=new String[1];
            listadoGrados[0]="Seleccione...";
            DefaultComboBoxModel grados= new DefaultComboBoxModel(listadoGrados);
            grado.setModel(grados);
        }
    }
    
     private boolean validarCamposPanel( ){
        boolean datosCompletos=true;
      if(grado.getSelectedIndex()==0){
          gradoT.setForeground(Color.red);
          datosCompletos=false;
      }
      else{
          gradoT.setForeground(Color.WHITE);
      }
      if(consecutivo.getSelectedIndex()==0){
          consecutivoT.setForeground(Color.red);
          datosCompletos=false;
      }
      else{
        consecutivoT.setForeground(Color.WHITE);
      }
      if(materia.getSelectedIndex()==0){
          materiaT.setForeground(Color.red);
          datosCompletos=false;
      }
      else{
          materiaT.setForeground(Color.WHITE);
      }
      return datosCompletos;
    }
     
    private ControlGestionarExamenes controlGestionarExamenes;
    private ControlGestionarEvaluaciones controlGestionarEvaluaciones;
    private ControlAdministrarCursos controlAdministrarCursos;
    private JScrollPane jScrollPane1;
    private JTable ultimoResultadoBusqueda;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> consecutivo;
    private javax.swing.JLabel consecutivoT;
    private javax.swing.JComboBox<String> grado;
    private javax.swing.JLabel gradoT;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> materia;
    private javax.swing.JLabel materiaT;
    private javax.swing.JButton mostrar;
    private javax.swing.JPanel panelBusqueda;
    // End of variables declaration//GEN-END:variables
}
